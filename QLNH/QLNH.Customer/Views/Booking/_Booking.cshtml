<script src="~/vendor/aos/aos.js"></script>
<link href="~/vendor/aos/aos.css" rel="stylesheet">
<link href="/css/style_booking.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

<!-- Nút Đặt Bàn -->
<!-- Form Đặt Bàn -->
<!-- Nút Đặt Bàn -->
<!-- Form Đặt Bàn -->
<section id="book-a-table" class="book-a-table section p-5">
    <div class="container" data-aos="fade-up" data-aos-delay="100">
        <h2 class="text-center mb-4">Đặt Bàn Ngay</h2>
        <p class="text-center text-white-50">Vui lòng điền thông tin của bạn, chúng tôi sẽ liên hệ lại ngay!</p>

        <!-- Thông báo lỗi, ẩn mặc định -->
        <div id="error-message-area" class="text-center text-danger" style="display:none;"></div>

        <form method="post" role="form" id="booking-form" class="php-email-form row g-4">
            <div class="col-lg-6 col-md-6">
                <label for="phone" class="form-label text-white">Số Điện Thoại</label>
                <input type="text" class="form-control form-control-lg animated-input" name="phone" id="phone" placeholder="Nhập số điện thoại của bạn" required>
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="name" class="form-label text-white">Họ Tên</label>
                <input type="text" name="name" class="form-control form-control-lg animated-input" id="name" placeholder="Nhập họ tên của bạn" disabled>
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="email" class="form-label text-white">Email</label>
                <input type="email" class="form-control form-control-lg animated-input" name="email" id="email" placeholder="Nhập email của bạn" disabled>
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="diachi" class="form-label text-white">Địa Chỉ</label>
                <input type="text" class="form-control form-control-lg animated-input" name="diachi" id="diachi" placeholder="Nhập địa chỉ của bạn" disabled>
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="date" class="form-label text-white">Chọn Ngày</label>
                <input type="date" name="date" class="form-control form-control-lg animated-input" id="date">
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="time" class="form-label text-white">Chọn Giờ</label>
                <input type="time" class="form-control form-control-lg animated-input" name="time" id="time">
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="people" class="form-label text-white">Số Người</label>
                <input type="number" class="form-control form-control-lg animated-input" name="people" id="people" placeholder="Nhập số người">
            </div>
            <div class="col-lg-6 col-md-6">
                <label for="khu-vuc-select" class="form-label text-white">Chọn Khu Vực</label>
                <select id="khu-vuc-select" class="form-control form-control-lg animated-input">
                    <option value="">Chọn khu vực</option>
                </select>
            </div>
            <!-- Selected Table Details (displayed dynamically) -->
            <div class="col-lg-6 col-md-6" id="selectedTableDetails" style="display:none;">
                <label class="form-label text-white">Bàn Đã Chọn</label>
                <input type="text" class="form-control form-control-lg animated-input" id="selectedTableNumber" readonly>
            </div>
            <div class="col-lg-6 col-md-6" id="selectedTableSeatsContainer" style="display:none;">
                <label class="form-label text-white">Số Ghế</label>
                <input type="text" class="form-control form-control-lg animated-input" id="selectedTableSeats" readonly>
            </div>

            <!-- Modal hiển thị sơ đồ các bàn -->
            <div id="tableLayoutModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeModal()">&times;</span>
                    <h2 id="modalTitle">Sơ đồ khu vực</h2>

                    <!-- Bộ lọc theo ngày và trạng thái bàn -->
                    <div class="row mb-4">
                        <div class="col-lg-4 col-md-4">
                            <label for="filterDate" class="form-label">Chọn Ngày</label>
                            <input type="date" id="filterDate" class="form-control form-control-lg" required />
                        </div>
                        <div class="col-lg-4 col-md-4">
                            <label for="filterStatus" class="form-label">Trạng Thái Bàn</label>
                            <select id="filterStatus" class="form-control form-control-lg">
                                <option value="">Tất cả</option>
                                <option value="Trống">Trống</option>
                                <option value="Đã Đặt">Đã Đặt</option>
                            </select>
                        </div>
                        <div class="col-lg-4 col-md-4">
                            <button id="filterButton" class="btn btn-gradient btn-lg">Tìm Bàn</button>
                        </div>
                    </div>

                    <!-- Sơ đồ các khu vực -->
                    <div id="tableLayout" class="table-layout">
                        <div id="khuVucA" class="khu-vuc">Khu Vực A</div>
                        <div id="nhaBep" class="bep-area">Nhà Bếp</div>
                        <div id="banCong" class="ban-cong">Ban Công</div>
                    </div>

                    <div class="table-legend">
                        <p>
                            <span class="legend-item" style="background-color: #ffeb3b;"></span> Bàn trống
                        </p>
                        <p>
                            <span class="legend-item" style="background-color: #f44336;"></span> Bàn đã đặt
                        </p>
                    </div>
                    <!-- Nút đặt bàn -->
                    <div id="tableInfo">
                        <p id="selectedTableInfo"></p>
                        <button id="bookTableButton" class="btn btn-gradient btn-lg" style="display:none;">Đặt Bàn</button>
                    </div>
                </div>
            </div>

            <div class="col-lg-12 col-md-12">
                <label class="form-label text-white">Bạn có muốn đặt món trước?</label><br>
                <input type="radio" id="preOrderYes" name="preOrder" value="yes">
                <label for="preOrderYes" class="text-white">Có</label><br>
                <input type="radio" id="preOrderNo" name="preOrder" value="no" checked>
                <label for="preOrderNo" class="text-white">Không</label>

                <!-- Nơi hiển thị các món đã thêm vào giỏ hàng -->
                <div id="selectedItemsSection" class="selected-items-section" style="margin-top: 20px;"></div>
            </div>


            <div id="foodMenuPopup" class="food-menu-popup">
                <div class="food-menu-popup-content">
                    <span class="food-menu-popup-close" id="closeFoodMenuPopup">&times;</span>
                    <h2>Chọn Món Ăn</h2>

                    <!-- Left: Menu Categories -->
                    <div class="menu-categories">
                        <ul id="foodCategoryList" class="menu-category-list"></ul>
                    </div>

                    <!-- Center: Food Items Display -->
                    <div class="menu-items-display">
                        <ul id="foodItemsList" class="food-items-list"></ul>
                    </div>

                    <!-- Right: Cart and Add Button -->
                    <div class="cart-container">
                        <h4 style="color:aquamarine">Giỏ Hàng</h4>
                        <ul id="foodCartList">
                            <!-- Each item will be dynamically inserted here -->
                        </ul>
                        <p><strong>Tổng Cộng: </strong><span id="foodTotalPrice">0</span> VND</p>

                        <!-- Add to Cart button at the bottom -->
                        <button id="addToCartButton" class="food-btn btn-lg">Thêm Vào Giỏ</button>
                    </div>
                </div>
            </div>



            <div class="text-center mt-4">
                <button id="btn-book-table" type="submit" class="btn btn-gradient btn-lg px-5">Đặt Bàn Ngay</button>
            </div>
            <div id="otpModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <span class="close" id="closeOtpModal">&times;</span>
                    <h2>Nhập Mã OTP</h2>
                    <p>Vui lòng nhập mã OTP mà bạn đã nhận được qua tin nhắn.</p>
                    <input type="text" id="otpCode" placeholder="Nhập mã OTP" class="form-control form-control-lg" required>
                    <button id="confirmOtpButton" class="btn btn-gradient btn-lg mt-4">Xác Nhận</button>
                </div>
            </div>
        </form>
    </div>
</section>


<!-- Robot -->
<div class="robot-container" id="robot" style="display: none;">
    <div class="robot-body">
        <div class="robot-head">
            <div class="robot-eye"></div>
            <div class="robot-eye right"></div>
            <div class="robot-mouth"></div>
        </div>
        <div class="robot-arm"></div>
        <div class="robot-arm right"></div>
        <div class="robot-leg"></div>
        <div class="robot-leg right"></div>
    </div>
</div>

<!-- JS Logic -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const bookTableButton = document.getElementById("btn-book-a-table");
        const robot = document.getElementById("robot");

        // Hàm hiển thị robot và chữ Xin chào
        function showRobot() {
            robot.style.display = "block"; // Hiển thị robot

            // Thêm chữ Xin chào nếu chưa có
            if (!robot.querySelector('.robot-greeting')) {
                const greeting = document.createElement('div');
                greeting.className = 'robot-greeting';
                greeting.textContent = 'Xin chào!';
                robot.appendChild(greeting);
            }

            // Sau 3 giây, ẩn robot và lời chào
            setTimeout(function () {
                robot.style.display = "none";
            }, 3000);
        }

        // Khi người dùng nhấn vào nút "Đặt Bàn"
        bookTableButton.addEventListener("click", function (e) {
            e.preventDefault(); // Ngăn chặn điều hướng mặc định của nút

            // Hiển thị robot ngay khi nhấn nút "Đặt Bàn"
            showRobot();
        });

        // Kiểm tra trạng thái lưu trong sessionStorage khi tải trang
        if (window.location.hash === "#book-a-table") {
            // Hiển thị robot
            showRobot();
        }
    });
</script>
<!-- JS for dynamic behavior -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const phoneInput = document.getElementById('phone');
        const nameInput = document.getElementById('name');
        const emailInput = document.getElementById('email');
        const addressInput = document.getElementById('diachi');
        const errorMessage = document.getElementById('error-message-area');

        phoneInput.addEventListener('blur', async function () {
            const phoneNumber = phoneInput.value.trim();
            errorMessage.innerHTML = '';
            errorMessage.style.display = 'none'; // Ẩn thông báo khi không có lỗi

            if (phoneNumber === '') {
                errorMessage.innerHTML = 'Vui lòng nhập số điện thoại của bạn.';
                errorMessage.style.display = 'block'; // Hiển thị thông báo lỗi
                return;
            }

            try {
                const response = await fetch(`/Booking/GetCustomerByPhone?phoneNumber=${phoneNumber}`);
                if (!response.ok) throw new Error('Lỗi API');
                const data = await response.json();

                if (data.isSuccess && data.data) {
                    const customer = data.data;
                    nameInput.value = customer.hoTen;
                    emailInput.value = customer.email;
                    addressInput.value = customer.diaChi || '';
                    nameInput.disabled = false;
                    emailInput.disabled = false;
                    addressInput.disabled = false;
                    errorMessage.style.display = 'none'; // Ẩn khi không có lỗi
                } else {
                    errorMessage.innerHTML = 'Không tìm thấy khách hàng. Vui lòng nhập thông tin thủ công.';
                    errorMessage.style.display = 'block'; // Hiển thị khi có lỗi
                    nameInput.disabled = false;
                    emailInput.disabled = false;
                    addressInput.disabled = false;
                }
            } catch (error) {
                errorMessage.innerHTML = 'Lỗi khi tìm kiếm thông tin khách hàng.';
                errorMessage.style.display = 'block'; // Hiển thị khi có lỗi
            }
        });
    });

</script>

<!--Xử lí map khu vực-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const filterButton = document.getElementById("filterButton");
        const khuVucSelect = document.getElementById("khu-vuc-select");
        const filterDate = document.getElementById("filterDate");
        const filterStatus = document.getElementById("filterStatus");
        const errorMessage = document.getElementById("error-message-area");
        const modal = document.getElementById("tableLayoutModal");
        const layout = document.getElementById("tableLayout");
        const modalTitle = document.getElementById("modalTitle");
        const selectedTableInfo = document.getElementById("selectedTableInfo");
        const bookTableButton = document.getElementById("bookTableButton");

        // Selected table elements
        const selectedTableDetailsDiv = document.getElementById("selectedTableDetails");
        const selectedTableSeatsContainer = document.getElementById("selectedTableSeatsContainer");
        const selectedTableNumber = document.getElementById("selectedTableNumber");
        const selectedTableSeats = document.getElementById("selectedTableSeats");
        // Hàm lấy dữ liệu khu vực từ API
        async function getKhuVuc() {
            try {
                const response = await fetch('/Booking/GetKhuVuc');
                if (!response.ok) throw new Error('Lỗi khi lấy khu vực');
                const data = await response.json();
                populateKhuVucSelect(data);
            } catch (error) {
                console.error(error);
            }
        }

        // Đổ dữ liệu vào select khu vực
        function populateKhuVucSelect(khuVucList) {
            khuVucList.forEach(khuVuc => {
                const option = document.createElement('option');
                option.value = khuVuc.khuVucId;
                option.textContent = khuVuc.tenKhuVuc;
                khuVucSelect.appendChild(option);
            });
        }

        // Khi chọn khu vực, cập nhật modal
        khuVucSelect.addEventListener('change', function () {
            const selectedKhuVuc = khuVucSelect.options[khuVucSelect.selectedIndex].text;  // Lấy tên khu vực được chọn
            modalTitle.textContent = `Sơ đồ khu vực ${selectedKhuVuc}`;  // Cập nhật tiêu đề của modal
            modal.style.display = "flex";  // Hiển thị modal khi chọn khu vực
        });

        // Kiểm tra nút filterButton có tồn tại không
        if (!filterButton) {
            console.error("filterButton element not found");
            return;
        }

        async function filterTables() {
            const khuVucId = khuVucSelect.value;  // Lấy giá trị của khu vực được chọn
            const ngay = filterDate.value;
            let trangThai = filterStatus.value;

            // Nếu không có trạng thái nào được chọn, đặt trangThai thành "Tất cả"
            if (!trangThai || trangThai === "") {
                trangThai = "Tất cả";  // Đặt giá trị mặc định nếu không có trạng thái được chọn
            }

            // Kiểm tra nếu ngày hoặc khu vực không được chọn
            if (!ngay || !khuVucId) {
                errorMessage.style.display = 'block';
                errorMessage.textContent = "Vui lòng chọn đầy đủ thông tin!";
                return; // Không tiếp tục nếu thiếu thông tin
            }

            try {
                // Gọi API để lấy dữ liệu bàn theo khu vực, ngày và trạng thái
                const response = await fetch(`/Booking/GetBanByKhuVucAndNgay?khuVucId=${khuVucId}&ngay=${ngay}&trangThai=${trangThai}`);
                if (!response.ok) throw new Error('Lỗi khi lấy danh sách bàn');
                const tables = await response.json();

                if (tables && Array.isArray(tables)) {
                    displayTables(tables); // Hiển thị danh sách bàn sau khi lấy về
                } else {
                    throw new Error('Dữ liệu trả về không hợp lệ');
                }
            } catch (error) {
                errorMessage.style.display = 'block';
                errorMessage.textContent = "Đã có lỗi xảy ra khi tìm kiếm bàn.";
                console.error(error);
            }
        }


        // Khi người dùng nhấn nút "Tìm Bàn"
        filterButton.addEventListener("click", function (e) {
            e.preventDefault(); // Ngăn chặn việc gửi form mặc định
            filterTables(); // Gọi hàm để lọc bàn
        });

        function displayTables(tables) {
            layout.innerHTML = '';  // Xóa layout cũ

            // Hiển thị khu vực Bếp cho mọi khu vực
            const bepDiv = document.createElement('div');
            bepDiv.classList.add('bep-area');
            bepDiv.textContent = 'Khu Vực Bếp';
            layout.appendChild(bepDiv);

            // Hiển thị khu vực A
            const khuVucADiv = document.createElement('div');
            khuVucADiv.classList.add('khu-vuc');
            khuVucADiv.textContent = 'Khu Vực A';
            layout.appendChild(khuVucADiv);

            // Hiển thị Ban Công
            const banCongDiv = document.createElement('div');
            banCongDiv.classList.add('ban-cong');
            banCongDiv.textContent = 'Ban Công';
            layout.appendChild(banCongDiv);

            // Hiển thị danh sách bàn trong khu vực trung tâm
            const tableContainer = document.createElement('div');
            tableContainer.classList.add('tables');

            if (tables && tables.length > 0) {  // Kiểm tra xem danh sách bàn có tồn tại và không trống
                tables.forEach(table => {
                    const tableDiv = document.createElement('div');
                    tableDiv.classList.add('table');

                    if (table.trangThai.trim() === 'Đã đặt') {
                        tableDiv.style.backgroundColor = '#f44336';
                        tableDiv.style.color = '#fff';
                    }

                    tableDiv.innerHTML = `
                            <p>Bàn: ${table.banId}</p>
                            <p>Số ghế: ${table.ban.soGhe}</p>
                        `;

                    if (table.trangThai.trim() === 'Trống') {
                        tableDiv.addEventListener('click', () => {
                            const confirmSelection = confirm(`Bạn có muốn chọn bàn ${table.banId} không?`);

                            if (confirmSelection) {
                                selectedTableNumber.value = table.banId;
                                selectedTableSeats.value = table.ban.soGhe;
                                selectedTableDetailsDiv.style.display = "block";
                                selectedTableSeatsContainer.style.display = "block";
                                modal.style.display = "none";
                            }
                        });
                    }

                    tableContainer.appendChild(tableDiv);
                });
            } else {
                const noTableDiv = document.createElement('div');
                noTableDiv.classList.add('no-tables');
                noTableDiv.textContent = 'Không có bàn nào được tìm thấy cho ngày và khu vực đã chọn.';
                layout.appendChild(noTableDiv);
            }

            layout.appendChild(tableContainer);
        }

        // Đóng modal khi nhấn ra ngoài
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        };
        document.querySelector(".close").onclick = function () {
            modal.style.display = "none";
        };

        // Gọi hàm khi trang load
        getKhuVuc();
    });

</script>

<!--Xử lí món ăn-->
<!-- JS for dynamic behavior -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const preOrderYes = document.getElementById('preOrderYes');
        const preOrderNo = document.getElementById('preOrderNo');
        const foodCategoryList = document.getElementById('foodCategoryList'); // Category list
        const foodItemsList = document.getElementById('foodItemsList'); // Dishes list
        const foodCartList = document.getElementById('foodCartList'); // Cart list
        const foodTotalPrice = document.getElementById('foodTotalPrice'); // Total price
        const selectedItemsContainer = document.getElementById('selectedItemsContainer'); // Container to display selected items below
        const addToCartButton = document.getElementById('addToCartButton');
        let cart = [];
        let totalPrice = 0;

        // Hide modal by default
        foodMenuPopup.style.display = 'none';

        // Show modal on "Có" selection
        preOrderYes.addEventListener('click', function () {
            foodMenuPopup.style.display = 'flex';
            loadMenu(); // Load menu dynamically
        });

        // Hide modal on "Không" selection
        preOrderNo.addEventListener('click', function () {
            foodMenuPopup.style.display = 'none';
        });

        // Close modal when close button is clicked
        closeFoodMenuPopup.addEventListener('click', function () {
            foodMenuPopup.style.display = 'none';
        });

        // Handle "Thêm Vào Giỏ" button click
        addToCartButton.addEventListener('click', function () {
            foodMenuPopup.style.display = 'none'; // Close the modal when "Thêm Vào Giỏ" is clicked
            preOrderYes.checked = true; // Automatically select "Có"
            displaySelectedItems(); // Display selected items below the radio button section
        });

        // Load menu from API
        function loadMenu() {
            console.log("Calling API /Booking/GetMenuWithSubGroups...");

            fetch('/Booking/GetMenuWithSubGroups')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch menu data');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.length > 0) {
                        renderCategories(data); // Render main categories
                    } else {
                        foodCategoryList.innerHTML = '<p>No menu data available.</p>';
                    }
                })
                .catch(error => {
                    foodCategoryList.innerHTML = '<p>Failed to load menu. Please try again later.</p>';
                    console.error('API Error:', error);
                });
        }

        // Display selected items below the cart
        function displaySelectedItems() {
            const selectedItemsSection = document.getElementById('selectedItemsSection');
            selectedItemsSection.innerHTML = ''; // Clear old content

            cart.forEach(item => {
                // Đường dẫn đầy đủ tới hình ảnh
                const dishImage = item.image ? `/images/${item.image}` : '/images/default-image.jpg';

                const selectedItem = document.createElement('div');
                selectedItem.classList.add('selected-item');
                selectedItem.innerHTML = `
                <img src="${dishImage}" alt="${item.name}" class="selected-item-image" />
                <div class="selected-item-details">
                    <h4>${item.name}</h4>
                    <p>Price: ${item.price.toLocaleString()} VND</p>
                </div>
            `;
                selectedItemsSection.appendChild(selectedItem);
            });
        }



        // Function to render categories recursively
        function renderCategories(menuData) {
            foodCategoryList.innerHTML = ''; // Clear previous categories or subcategories

            menuData.forEach(category => {
                const categoryItem = document.createElement('li');
                categoryItem.textContent = category.tenNhom;
                categoryItem.classList.add('menu-category-item');

                // Create an arrow for categories with children
                if (category.children && category.children.length > 0) {
                    const arrow = document.createElement('span');
                    arrow.textContent = " ➤ "; // Arrow to indicate it can expand
                    categoryItem.appendChild(arrow);

                    // Attach subcategory toggle functionality
                    categoryItem.addEventListener('click', function () {
                        const expanded = categoryItem.classList.toggle('expanded'); // Toggle class

                        if (expanded) {
                            renderSubCategories(category.children, categoryItem); // Render subcategories
                        } else {
                            // If collapsing, remove the subcategory list
                            const subCategoryList = categoryItem.querySelector('ul');
                            if (subCategoryList) {
                                subCategoryList.remove();
                            }
                        }
                    });
                } else {
                    // If no children, display the dishes directly
                    categoryItem.addEventListener('click', function () {
                        displayDishes(category.dishes);
                    });
                }

                foodCategoryList.appendChild(categoryItem);
            });
        }

        // Function to render subcategories recursively
        function renderSubCategories(subCategories, parentItem) {
            let subCategoryList = parentItem.querySelector('ul');

            if (!subCategoryList) {
                subCategoryList = document.createElement('ul');
                subCategoryList.classList.add('sub-category-list');
                parentItem.appendChild(subCategoryList);
            }
            subCategoryList.innerHTML = ''; // Clear existing subcategories before adding new ones

            subCategories.forEach(subCategory => {
                const subCategoryItem = document.createElement('li');
                subCategoryItem.textContent = subCategory.tenNhom;
                subCategoryItem.classList.add('menu-subcategory-item');

                if (subCategory.children && subCategory.children.length > 0) {
                    // Recursively render subcategories if they exist
                    subCategoryItem.addEventListener('click', function (event) {
                        event.stopPropagation(); // Prevent triggering parent clicks
                        const expanded = subCategoryItem.classList.toggle('expanded'); // Toggle class

                        if (expanded) {
                            renderSubCategories(subCategory.children, subCategoryItem); // Render nested subcategories
                        } else {
                            const innerSubCategoryList = subCategoryItem.querySelector('ul');
                            if (innerSubCategoryList) {
                                innerSubCategoryList.remove();
                            }
                        }
                    });
                } else {
                    // If no further children, show dishes for the subcategory
                    subCategoryItem.addEventListener('click', function (event) {
                        event.stopPropagation(); // Prevent triggering parent clicks
                        displayDishes(subCategory.dishes);
                    });
                }

                subCategoryList.appendChild(subCategoryItem);
            });
        }

        // Function to display dishes when a category or subcategory is clicked
        function displayDishes(dishes) {
            foodItemsList.innerHTML = ''; // Clear previous items

            if (!dishes || dishes.length === 0) {
                foodItemsList.innerHTML = '<p>No dishes available in this category.</p>';
                return;
            }

            dishes.forEach(dish => {
                const foodItem = document.createElement('li');
                foodItem.innerHTML = `
                        <img src="${dish.hinhAnh || 'default-image.jpg'}" alt="${dish.tenMonAn}" />
                        <div>
                            <h4>${dish.tenMonAn}</h4>
                            <p>${dish.moTa}</p>
                            <p>Price: ${dish.gia} VND</p>
                            <input type="checkbox" name="dishes[]" value="${dish.monAnId}" data-price="${dish.gia}" data-name="${dish.tenMonAn}">
                        </div>
                    `;

                // Add event listener to the checkbox
                foodItem.querySelector('input[type="checkbox"]').addEventListener('change', function (e) {
                    const checkbox = e.target;
                    const dishName = checkbox.getAttribute('data-name');
                    const dishPrice = parseInt(checkbox.getAttribute('data-price'));

                    if (checkbox.checked) {
                        addToCart(dishName, dishPrice);
                    } else {
                        removeFromCart(dishName, dishPrice);
                    }

                    updateTotalPrice();
                });

                foodItemsList.appendChild(foodItem);
            });
        }

        // Add item to the cart
        function addToCart(name, price) {
            const cartItem = document.createElement('li');
            cartItem.classList.add('cart-item');

            // Remove image and only display name and price
            cartItem.innerHTML = `
                <div class="cart-item-content">
                    <div class="cart-item-details">
                        <h4>${name}</h4>
                        <p>${price.toLocaleString()} VND</p>
                    </div>
                </div>
            `;

            // Add the cart item to the cart list
            foodCartList.appendChild(cartItem);

            // Add to cart array and update total price
            cart.push({ name, price });
            updateTotalPrice();
        }
        // Function to display selected items below the cart (without image)
        function displaySelectedItems() {
            const selectedItemsSection = document.getElementById('selectedItemsSection');
            selectedItemsSection.innerHTML = ''; // Clear old content

            cart.forEach(item => {
                // Create a new div to display the item (no image)
                const selectedItem = document.createElement('div');
                selectedItem.classList.add('selected-item');
                selectedItem.innerHTML = `
                <div class="selected-item-details">
                    <h4>${item.name}</h4>
                    <p>Price: ${item.price.toLocaleString()} VND</p>
                </div>
            `;
                selectedItemsSection.appendChild(selectedItem);
            });
        }

        // Remove item from the cart
        function removeFromCart(name, price) {
            const cartItems = foodCartList.querySelectorAll('li');
            cartItems.forEach(item => {
                if (item.getAttribute('data-name') === name) {
                    item.remove();
                }
            });

            // Remove from cart array
            cart = cart.filter(item => item.name !== name);
        }

        // Update total price in the cart
        function updateTotalPrice() {
            const total = cart.reduce((sum, item) => sum + item.price, 0);
            foodTotalPrice.textContent = total.toLocaleString();
        }
    });
</script>
<!--Xử lí đặt bàn -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const bookTableButton = document.getElementById('btn-book-table');
        const otpModal = document.getElementById('otpModal');
        const closeOtpModal = document.getElementById('closeOtpModal');
        const confirmOtpButton = document.getElementById('confirmOtpButton');
        const otpInput = document.getElementById('otpCode');
        let otpValue = "";
        let userEmail = ""; // Biến lưu email người dùng
        let userHoten = ""; // Biến lưu họ tên người dùng

        // Khi nhấn nút "Đặt Bàn Ngay"
        bookTableButton.addEventListener('click', async function (event) {
            event.preventDefault(); // Ngăn chặn submit form mặc định

            // Lấy thông tin họ tên và email từ form
            userEmail = document.getElementById('email').value;
            userHoten = document.getElementById('name').value;

            if (!userEmail || !userHoten) {
                alert("Vui lòng nhập đầy đủ họ tên và email.");
                return;
            }

            // Tạo đối tượng request để gửi OTP
            const otpRequest = {
                email: userEmail,
                hoten: userHoten,
            };

            try {
                // Gọi API để gửi OTP về email
                const otpResponse = await fetch('/Booking/Otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(otpRequest),
                });

                if (otpResponse.ok) {
                    alert('OTP đã được gửi đến email của bạn.');
                    // Hiển thị modal nhập OTP sau khi gửi OTP thành công
                    otpModal.style.display = 'flex';
                } else {
                    alert('Không thể gửi OTP. Vui lòng thử lại.');
                }
            } catch (error) {
                console.error('OTP Error:', error);
                alert('Có lỗi xảy ra khi gửi mã OTP.');
            }
        });

        // Đóng modal khi nhấn vào nút close
        closeOtpModal.addEventListener('click', function () {
            otpModal.style.display = 'none';
        });

        // Khi nhấn nút "Xác Nhận" trong modal OTP
        confirmOtpButton.addEventListener('click', async function () {
            otpValue = otpInput.value.trim(); // Lấy giá trị OTP từ input

            if (otpValue === "") {
                alert("Vui lòng nhập mã OTP.");
                return;
            }

            // Xác nhận OTP với API (nếu cần)
            try {
                // Nếu OTP hợp lệ, gọi hàm đặt bàn
                submitBookingForm(); // Gọi hàm submit booking sau khi OTP hợp lệ
            } catch (error) {
                console.error('OTP Error:', error);
                alert('Có lỗi xảy ra khi xác nhận OTP.');
            }
        });

        // Hàm gửi yêu cầu đặt bàn sau khi OTP hợp lệ
        // Hàm gửi yêu cầu đặt bàn sau khi OTP hợp lệ
        async function submitBookingForm() {
            const phone = document.getElementById('phone').value;
            const date = document.getElementById('date').value;
            const time = document.getElementById('time').value;
            const people = document.getElementById('people').value;
            const khuVuc = document.getElementById('khu-vuc-select').value;
            const selectedItems = getSelectedItems(); // Lấy danh sách món ăn đã chọn

            const requestData = {
                Name: userHoten,
                Email: userEmail,
                Phone: phone,
                Date: date,
                Time: time,
                People: parseInt(people),
                KhuVuc: khuVuc,
                Otp: otpValue, // Gửi OTP đã xác nhận
                SelectedItems: selectedItems,
            };

            try {
                const response = await fetch('/Booking/DatBan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData),
                });

                if (response.ok) {
                    alert('Đặt bàn thành công!');
                    // Reload lại trang sau khi đặt bàn thành công
                    location.reload();  // Thêm dòng này để reload lại trang sau khi đặt bàn thành công
                } else {
                    const errorData = await response.json();
                    console.error('Error:', errorData);
                    alert('Có lỗi xảy ra khi đặt bàn.');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                alert('Đã có lỗi kết nối xảy ra.');
            }
        }


        // Hàm để lấy danh sách món ăn đã chọn
        function getSelectedItems() {
            const selectedItems = [];
            const checkboxes = document.querySelectorAll('input[name="dishes[]"]:checked');

            checkboxes.forEach((checkbox) => {
                const dishName = checkbox.getAttribute('data-name');
                const dishPrice = parseFloat(checkbox.getAttribute('data-price'));
                const dishId = parseInt(checkbox.value);

                selectedItems.push({
                    MonAnId: dishId,
                    Name: dishName,
                    Price: dishPrice,
                    Quantity: 1,
                });
            });

            return selectedItems;
        }
    });
</script>

