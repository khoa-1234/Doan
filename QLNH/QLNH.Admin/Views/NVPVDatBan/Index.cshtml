<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


<h2 class="text-center">Danh Sách Bàn </h2>

<!-- Dropdown Trạng Thái và Nút Tìm (đặt trong cùng một div để canh ngang) -->
<!-- Bộ lọc thêm cho Ngày và Số Ghế -->
<div class="d-flex justify-content-center align-items-center mb-4 form-inline">
    <label for="ngayDat" class="mr-2">Ngày:</label>
    <input type="date" id="ngayDatFilter" class="form-control form-control-sm mr-3" style="width: 180px;" />


    <label for="soNguoi" class="mr-2">Số Người:</label>
    <input type="number" id="soNguoiFilter" class="form-control form-control-sm mr-3" style="width: 120px;" placeholder="Nhập số người" />

    <label for="trangThai" class="mr-2">Trạng Thái:</label>
    <select id="trangThai" name="trangThai" class="form-control form-control-sm mr-3" style="width: 150px;">
        <option value="">Tất cả</option>
        <option value="Trống">Trống</option>
        <option value="Đã đặt">Đã đặt</option>
    </select>

    <button class="btn btn-primary btn-sm" onclick="handleSearch()">Tìm</button>

</div>

<!-- Filter Buttons Khu Vực (Động từ API) -->
<div id="khuVucContainer" class="d-flex justify-content-center mb-4">
    <!-- Các nút khu vực sẽ được thêm bởi JavaScript -->
</div>

<!-- Container để hiển thị danh sách bàn -->
<div id="tableList" class="row">
    <!-- Nội dung của danh sách bàn sẽ được cập nhật bởi JavaScript -->
</div>

<!-- Hidden Username -->
<input type="hidden" id="hiddenUsername" value="@User.Identity.Name" />

<!-- Booking Modal -->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mở Bàn</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="bookingForm" method="post">
                    <input type="hidden" id="modalTableId" />
                    <input type="hidden" id="modalNhanVienMoBanId" />

                    <div class="form-group">
                        <label for="modalTableName">Tên Bàn:</label>
                        <input type="text" id="modalTableName" class="form-control" disabled />
                    </div>
                    <div class="form-group">
                        <label for="modalSeats">Số Ghế:</label>
                        <input type="number" id="modalSeats" class="form-control" disabled />
                    </div>
                    <div class="form-group">
                        <label for="numberOfGuests">Số Người:</label>
                        <input type="number" id="numberOfGuests" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="modalArea">Khu Vực:</label>
                        <input type="text" id="modalArea" class="form-control" disabled />
                        <input type="hidden" id="modalKhuVucId" />

                    </div>
                    <div class="form-group">
                        <label for="ngayDat">Ngày Đặt:</label>
                        <input type="date" id="ngayDat" class="form-control" readonly />
                    </div>
                    <div class="form-group">
                        <label for="ghiChu">Ghi Chú:</label>
                        <input type="text" id="ghiChu" class="form-control" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-success">Xác Nhận Mở Bàn</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Booking Modal for Dat Ban (Đặt Bàn) -->
<div class="modal fade" id="datBanModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Đặt Bàn</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="datBanForm" method="post">
                    <input type="hidden" id="datBanTableId" />
                    <input type="hidden" id="datBanKhuVucId" />

                    <div class="form-group">
                        <label for="datBanTableName">Tên Bàn:</label>
                        <input type="text" id="datBanTableName" class="form-control" disabled />
                    </div>
                    <div class="form-group">
                        <label for="datBanSoNguoi">Số Người:</label>
                        <input type="number" id="datBanSoNguoi" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="hoTen">Họ Tên:</label>
                        <input type="text" id="hoTen" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="soDienThoai">Số Điện Thoại:</label>
                        <input type="text" id="soDienThoai" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="ghiChu">Ghi Chú:</label>
                        <input type="text" id="ghiChu" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="thoiGianDat">Thời Gian Đặt:</label>
                        <input type="datetime-local" id="thoiGianDat" class="form-control" required />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-success">Xác Nhận Đặt Bàn</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#bookingModal').on('shown.bs.modal', function () {
            console.log('Modal Booking opened');
        });

        $('#datBanModal').on('shown.bs.modal', function () {
            console.log('Modal Dat Ban opened');
        });
    });

 </script>
<!--Xử lí việc đặt bàn-->
<script>
    function openDatBanModal(tableId, tableName, seats, area, khuVucId) {
        document.getElementById("datBanTableId").value = tableId;
        document.getElementById("datBanTableName").value = tableName;
        document.getElementById("datBanSoNguoi").max = seats; // Set the max number of people to the number of seats
        document.getElementById("datBanKhuVucId").value = khuVucId;

        const today = new Date().toISOString().substr(0, 10);
        document.getElementById("thoiGianDat").value = today;  // Set the current date

        $('#datBanModal').modal('show'); // Open the modal
    }

    document.addEventListener('DOMContentLoaded', function () {
        const datBanForm = document.getElementById('datBanForm');

        if (datBanForm) {
            datBanForm.addEventListener('submit', async function (event) {
                event.preventDefault(); // Prevent the form from reloading the page

                // Collect form data
                const tableId = document.getElementById("datBanTableId").value;
                const hoTen = document.getElementById("hoTen").value;
                const soNguoi = document.getElementById("datBanSoNguoi").value;
                const email = document.getElementById("email").value;
                const soDienThoai = document.getElementById("soDienThoai").value;
                const ghiChu = document.getElementById("ghiChu").value;
                const thoiGianDat = document.getElementById("thoiGianDat").value;
                const khuVucId = document.getElementById("datBanKhuVucId").value;

                // Prepare the data to send to the controller
                const bookingData = {
                    BanId: parseInt(tableId),
                    HoTen: hoTen,
                    SoNguoi: parseInt(soNguoi),
                    Email: email,
                    SoDienThoai: soDienThoai,
                    GhiChu: ghiChu,
                    ThoiGianDat: new Date(thoiGianDat).toISOString(),
                    KhuvucId: parseInt(khuVucId)
                };

                try {
                    // Call the controller method to process the booking
                    const response = await fetch('/NVPVDatBan/DatBanOffline', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(bookingData)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        alert(result.message || "Đặt bàn thành công!");
                        $('#datBanModal').modal('hide'); // Hide the modal
                        setTimeout(() => window.location.reload(), 1000); // Reload the page to update
                    } else {
                        const error = await response.json();
                        alert(`Có lỗi xảy ra: ${error.message}`);
                    }
                } catch (error) {
                    console.error("Lỗi khi đặt bàn:", error);
                    alert("Đã xảy ra lỗi khi đặt bàn.");
                }
            });
        }
    });
    document.addEventListener('DOMContentLoaded', function () {
        // Hàm đóng modal bằng ID của modal
        function closeModal(modalId) {
            $(`#${modalId}`).modal('hide'); // Ẩn modal bằng ID của nó
        }

        // Lấy các phần tử trong modal "Đặt Bàn"
        const datBanCloseButton = document.querySelector('#datBanModal .modal-footer .btn-secondary'); // Nút "Đóng" trong phần footer
        const datBanCloseIcon = document.querySelector('#datBanModal .modal-header .close'); // Nút "X" trong phần header

        // Thêm sự kiện lắng nghe cho cả hai nút trong modal "Đặt Bàn"
        if (datBanCloseButton) datBanCloseButton.addEventListener('click', function () { closeModal('datBanModal'); });
        if (datBanCloseIcon) datBanCloseIcon.addEventListener('click', function () { closeModal('datBanModal'); });
    });

</script>


<script>
    var selectedArea = "Tất Cả";  // Biến để giữ khu vực đã chọn

    // Hàm thay đổi khu vực được chọn và thay đổi màu nút
    function setSelectedArea(area, event) {
        selectedArea = area.trim();

        // Đặt màu nền cho các nút khu vực theo từng vùng
        document.querySelectorAll('.filter-btn').forEach(button => {
            button.classList.remove('active-area');
            let areaType = button.getAttribute("data-area").trim();
            if (areaType === area) {
                if (areaType === "VIP") {
                    button.style.backgroundColor = "#ffd700"; // Vàng cho VIP
                } else if (areaType === "Bên Trong") {
                    button.style.backgroundColor = "#87ceeb"; // Xanh dương cho Bên Trong
                } else if (areaType === "Bên Ngoài") {
                    button.style.backgroundColor = "#98fb98"; // Xanh lá cho Bên Ngoài
                } else {
                    button.style.backgroundColor = "#007bff"; // Màu mặc định
                }
                button.classList.add('active-area');
            } else {
                button.style.backgroundColor = ""; // Trả về màu mặc định cho các nút không được chọn
            }
        });
    }
    async function handleSearch() {
        const selectedDate = document.getElementById("ngayDatFilter").value;
        const selectedStatus = document.getElementById("trangThai").value.trim();
        const numberOfGuests = document.getElementById("soNguoiFilter").value;
        const khuVuc = selectedArea;  // Khu vực đã chọn

        if (!selectedDate) {
            alert("Vui lòng chọn ngày.");
            return;
        }

        const payload = {
            KhuVuc: khuVuc,
            TrangThai: selectedStatus,
            Ngay: new Date(selectedDate).toISOString(),
            SoNguoi: numberOfGuests ? parseInt(numberOfGuests) : null,
        };

        console.log("Sending filter data:", payload);

        try {
            const response = await fetch('/NVPVDatBan/FilterTables', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });

            if (!response.ok) {
                const error = await response.json();
                console.error("Error filtering tables:", error);
                alert(`Lỗi xảy ra: ${error.message}`);
            } else {
                const data = await response.json();
                console.log("Filtered tables:", data);
                updateTableList(data);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Đã xảy ra lỗi trong quá trình tìm kiếm.");
        }
    }


    function updateTableList(tables) {
        const tableListContainer = document.getElementById('tableList');
        tableListContainer.innerHTML = ''; // Clear existing content

        if (tables.length > 0) {
            tables.forEach(table => {
                const bgColor = table.tenKhuVuc === 'VIP' ? 'bg-vip' :
                    table.tenKhuVuc === 'Bên Trong' ? 'bg-inside' :
                        table.tenKhuVuc === 'Bên Ngoài' ? 'bg-outside' : '';

                const khuVuc = table.tenKhuVuc || "Không xác định";

                // Create appropriate action buttons based on table status
                let actionButtons = '';

                // Update for showing customer name and booking time when the table is booked
                let additionalInfo = '';
                if (table.trangThai === 'Trống') {
                    actionButtons = `
                        <button class="btn btn-primary btn-sm"
                                onclick="openBookingModal(${table.banId}, '${table.soBan}', ${table.soGhe}, '${khuVuc}', ${table.khuVucId})">
                            Mở Bàn
                        </button>
                        <button class="btn btn-warning btn-sm"
                                onclick="openDatBanModal(${table.banId}, '${table.soBan}', ${table.soGhe}, '${khuVuc}', ${table.khuVucId})">
                            Đặt Bàn
                        </button>
                    `;
                } else {
                    actionButtons = `
                        <button class="btn btn-danger btn-sm" onclick="cancelBooking(${table.datBanId})">
                            Hủy Bàn
                        </button>
                        <button class="btn btn-success btn-sm"
                                onclick="redirectToDatMon(${table.banId}, ${table.datBanId}, ${table.khachHangId}, ${table.donHangId})">
                            Đặt Món
                        </button>
                    `;

                    // Adding customer name and booking time when the table is reserved
                    if (table.khachHang) {
                        additionalInfo = `
                            <p class="text-bold" style="color: red;">
                                <strong>Khách Hàng:</strong> ${table.khachHang}<br/>
                                <strong>Thời Gian Đặt:</strong> ${new Date(table.ngayGioDat).toLocaleString()}
                            </p>
                        `;
                    }
                }

                const tableCard = `
                    <div class="col-md-4">
                        <div class="card mb-4 box-shadow ${bgColor}" data-table-id="${table.banId}">
                            <div class="card-body">
                                <h5 class="card-title">Bàn ${table.soBan}</h5>
                                <p class="card-text">
                                    <strong>Số Ghế:</strong> ${table.soGhe}<br />
                                    <strong>Khu Vực:</strong> ${khuVuc}<br />
                                    <strong>Trạng Thái:</strong> <span class="table-status">${table.trangThai}</span>
                                </p>
                                ${additionalInfo} <!-- This will display customer info if the table is reserved -->
                                <div class="d-flex justify-content-between">
                                    ${actionButtons} <!-- Action buttons based on status -->
                                </div>
                            </div>
                        </div>
                    </div>`;
                tableListContainer.insertAdjacentHTML('beforeend', tableCard);
            });
        } else {
            tableListContainer.innerHTML = '<p>Không có bàn nào được tìm thấy.</p>';
        }
    }


</script>

<script>
    // Function to open the modal and set table data
    function openBookingModal(tableId, tableName, seats, area, khuVucId) {
        document.getElementById("modalTableId").value = tableId;
        document.getElementById("modalTableName").value = tableName;
        document.getElementById("modalSeats").value = seats;
        document.getElementById("modalArea").value = area;
        document.getElementById("modalKhuVucId").value = khuVucId;

        const today = new Date().toISOString().substr(0, 10);
        document.getElementById("ngayDat").value = today;

        // Attach event listener to validate guests
        const guestsInput = document.getElementById("numberOfGuests");
        guestsInput.max = seats; // Set the max value to the number of seats

        $('#bookingModal').modal('show');
    }
    // Function to open the modal and set table data
    function openBookingModal(tableId, tableName, seats, area, khuVucId) {
        document.getElementById("modalTableId").value = tableId;
        document.getElementById("modalTableName").value = tableName;
        document.getElementById("modalSeats").value = seats;
        document.getElementById("modalArea").value = area;
        document.getElementById("modalKhuVucId").value = khuVucId;

        const today = new Date().toISOString().substr(0, 10);
        document.getElementById("ngayDat").value = today;

        $('#bookingModal').modal('show');
    }

    document.addEventListener('DOMContentLoaded', function () {
        const bookingForm = document.getElementById('bookingForm');
        const numberOfGuestsInput = document.getElementById('numberOfGuests'); // Số người nhập
        const modalSeatsInput = document.getElementById('modalSeats'); // Số ghế
        const submitButton = document.querySelector('.btn-success'); // Nút xác nhận mở bàn
        const closeButton = document.querySelector('#bookingModal .btn-secondary'); // Nút "Đóng"
        const closeIcon = document.querySelector('#bookingModal .close'); // Nút "X"

        // Đóng modal khi nhấn nút "Đóng" hoặc "X"
        if (closeButton) {
            closeButton.addEventListener('click', function () {
                $('#bookingModal').modal('hide'); // Đóng modal khi nhấn nút "Đóng"
            });
        }

        if (closeIcon) {
            closeIcon.addEventListener('click', function () {
                $('#bookingModal').modal('hide'); // Đóng modal khi nhấn nút "X"
            });
        }

        // Sự kiện 'input' để kiểm tra ngay khi số người thay đổi
        numberOfGuestsInput.addEventListener('input', function () {
            const soNguoi = parseInt(numberOfGuestsInput.value); // Lấy giá trị số người nhập
            const soGhe = parseInt(modalSeatsInput.value); // Lấy số ghế của bàn

            // Kiểm tra nếu số người vượt quá số ghế
            if (soNguoi > soGhe) {
                alert(`Số người không được vượt quá số ghế của bàn (${soGhe} ghế).`);
                submitButton.disabled = true; // Vô hiệu hóa nút submit khi có lỗi
            } else {
                submitButton.disabled = false; // Kích hoạt lại nút submit nếu hợp lệ
            }
        });

        // Xử lý form submit
        if (bookingForm) {
            bookingForm.addEventListener('submit', async function (event) {
                event.preventDefault(); // Ngăn không cho trang reload
                console.log("Form submit triggered");

                // Thu thập dữ liệu từ form
                const tableId = document.getElementById("modalTableId").value;
                const soNguoi = parseInt(numberOfGuestsInput.value); // Lấy số người
                const soGhe = parseInt(modalSeatsInput.value); // Lấy số ghế
                const ngayDat = document.getElementById("ngayDat").value;
                const ghiChu = document.getElementById("ghiChu").value;
                const khuVucId = document.getElementById("modalKhuVucId").value;
                const username = document.getElementById("hiddenUsername").value;

                // Kiểm tra nếu số người vượt quá số ghế
                if (soNguoi > soGhe) {
                    alert(`Số người không được vượt quá số ghế của bàn (${soGhe} ghế).`);
                    return; // Dừng lại nếu có lỗi
                }

                if (!tableId || !soNguoi || !ngayDat || !khuVucId || !username) {
                    alert("Vui lòng điền đầy đủ thông tin.");
                    return; // Ngăn không cho submit nếu thiếu thông tin
                }

                // Chuẩn bị dữ liệu đặt bàn
                const bookingData = {
                    BanId: parseInt(tableId),
                    SoNguoi: soNguoi,
                    NgayDat: ngayDat,
                    GhiChu: ghiChu,
                    KhuvucId: parseInt(khuVucId),
                    Username: username
                };

                console.log("Sending booking data:", bookingData);

                try {
                    const response = await fetch('/NVPVDatBan/BookTable', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(bookingData)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        alert(result.message || "Đặt bàn thành công!");

                        // Đóng modal
                        $('#bookingModal').modal('hide');

                        // Điều hướng tới trang đặt món
                        const orderData = {
                            TableId: tableId,
                            DatBanId: result.datBanId,
                            KhachHangId: result.khachHangId,
                            DonHangId: result.donHangId === 'null' || result.donHangId === 'Khong co' ? null : result.donHangId
                        };

                        const redirectResponse = await fetch('/NVPVDatBan/ChuyenHuongDatMon', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(orderData)
                        });

                        if (redirectResponse.ok) {
                            const redirectUrl = await redirectResponse.text();
                            window.location.href = redirectUrl; // Điều hướng tới trang đặt món
                        } else {
                            const error = await redirectResponse.json();
                            console.log("Lỗi:", error);
                            alert(`Có lỗi xảy ra: ${error.message}`);
                        }
                    } else {
                        const error = await response.json();
                        console.error("Error:", error);
                        alert(`Có lỗi xảy ra: ${error.message}`);
                    }
                } catch (error) {
                    console.error("Lỗi khi đặt bàn:", error);
                    alert("Đã xảy ra lỗi khi đặt bàn.");
                }
            });
        } else {
            console.error('Không tìm thấy form booking.');
        }
    });




    function updateTableStatus(tableId) {
        fetch(`/NVPVDatBan/GetTableById/${tableId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new TypeError("Invalid JSON response");
                }
                return response.json();
            })
            .then(data => {
                const tableElement = document.querySelector(`[data-table-id='${tableId}']`);
                if (tableElement) {
                    const statusElement = tableElement.querySelector('.table-status');
                    statusElement.textContent = 'Đã đặt'; // Cập nhật trạng thái

                    // Thêm nút "Đặt Món" bên cạnh nút "Hủy Đặt"
                    const buttonContainer = tableElement.querySelector('.card-body');
                    let orderButton = buttonContainer.querySelector('.btn-success');

                    if (!orderButton) {
                        orderButton = document.createElement('button');
                        orderButton.classList.add('btn', 'btn-success');
                        orderButton.textContent = 'Đặt Món';
                        orderButton.onclick = function () {
                            redirectToDatMon(tableId); // Chuyển hướng đến đặt món
                        };

                        buttonContainer.appendChild(orderButton);
                    }
                }
            })
            .catch(error => {
                console.error('Đặt bàn thành công nhưng không cập nhật được trạng thái:', error);
                alert('Đặt bàn thành công. Trang sẽ được tải lại.');
            });
    }


    async function redirectToDatMon(tableId, datBanId, khachHangId, donHangId) {
        const orderData = {
            TableId: tableId,
            DatBanId: datBanId,
            KhachHangId: khachHangId,
            DonHangId: donHangId === 'null' || donHangId === 'Khong co' ? null : donHangId // Xử lý DonHangId là null
        };
        console.log(orderData);
        try {
            const response = await fetch('/NVPVDatBan/ChuyenHuongDatMon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderData)
            });

            if (response.ok) {
                // Nhận URL chuyển hướng từ server
                const redirectUrl = await response.text();
                // Chuyển hướng đến URL
                window.location.href = redirectUrl;
            } else {
                const error = await response.json();
                console.log("Lỗi:", error);
                alert(`Có lỗi xảy ra: ${error.message}`);
            }
        } catch (error) {
            console.error("Lỗi khi đặt món:", error);
            alert("Đã xảy ra lỗi khi đặt món.");
        }
    }
   async function cancelBooking(datBanId) {
    const confirmCancel = confirm("Bạn có chắc chắn muốn hủy đặt bàn này?");
    if (!confirmCancel) return;

    try {
        const response = await fetch('/NVPVDatBan/ReleaseTable', {  // Gọi đúng route đến controller
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ DatBanId: datBanId })  // Gửi DatBanId theo dạng JSON
        });

        if (response.ok) {
            alert("Hủy đặt thành công!");
            window.location.reload();
        } else {
            const errorData = await response.json();
            console.error('Error:', errorData);
            alert(`Có lỗi xảy ra khi hủy đặt bàn: ${errorData.message}`);
        }
    } catch (error) {
        console.error('Có lỗi xảy ra khi gửi yêu cầu:', error);
        alert('Có lỗi xảy ra khi hủy đặt bàn.');
    }
}
    async function loadKhuVuc() {
        try {
            const response = await fetch('/NVPVDatBan/GetKhuVuc');
            if (response.ok) {
                const khuVucData = await response.json();
                if (khuVucData && khuVucData.length > 0) {
                    updateKhuVucList(khuVucData);
                } else {
                    console.log("Không có khu vực nào được tìm thấy");
                    document.getElementById('khuVucContainer').innerHTML = '<p>Không có khu vực nào được tìm thấy.</p>';
                }
            } else {
                console.error("Có lỗi xảy ra khi lấy danh sách khu vực");
            }
        } catch (error) {
            console.error("Lỗi khi tải khu vực:", error);
        }
    }

    function updateKhuVucList(khuVucData) {
        const khuVucContainer = document.getElementById('khuVucContainer');
        khuVucContainer.innerHTML = '';  // Xóa nội dung hiện tại

        // Thêm nút "Tất Cả" trước
        const tatCaButton = `<button type="button" class="btn filter-btn btn-outline-primary" data-area="Tất Cả" onclick="setSelectedArea('Tất Cả', event)">Tất Cả</button>`;
        khuVucContainer.insertAdjacentHTML('beforeend', tatCaButton);

        // Thêm các nút khu vực từ API
        khuVucData.forEach(function (khuVuc) {
            const button = `<button type="button" class="btn filter-btn btn-outline-primary" data-area="${khuVuc.tenKhuVuc}" onclick="setSelectedArea('${khuVuc.tenKhuVuc}', event)">${khuVuc.tenKhuVuc}</button>`;
            khuVucContainer.insertAdjacentHTML('beforeend', button);
        });
    }

    // Gọi hàm loadKhuVuc để tải khu vực khi trang được tải
    document.addEventListener('DOMContentLoaded', loadKhuVuc);

</script>
<!--Hàm lọc -->
<script>
    async function searchTablesByDate() {
        const selectedDate = document.getElementById("ngayDat").value;
        const selectedStatus = document.getElementById("trangThai").value.trim();
        const numberOfGuests = document.getElementById("soNguoiFilter").value;
        const khuVuc = selectedArea;

        console.log("Sending data to search: ", {
            ngay: selectedDate,
            trangThai: selectedStatus,
            soNguoi: numberOfGuests,
            khuVuc: khuVuc
        });

        try {
            const response = await fetch(`/NVPVDatBan/GetTablesByDate?ngay=${selectedDate}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) {
                const tables = await response.json();

                const filteredTables = tables.filter(table => {
                    const statusMatch = selectedStatus ? table.trangThai === selectedStatus : true;
                    const guestsMatch = numberOfGuests ? table.soGhe >= numberOfGuests : true;
                    const areaMatch = khuVuc === "Tất Cả" || table.khuVuc === khuVuc;
                    return statusMatch && guestsMatch && areaMatch;
                });

                updateTableList(filteredTables);
            } else {
                console.error("Error fetching table list:", response.statusText);
                alert("Không thể lấy danh sách bàn.");
            }
        } catch (error) {
            console.error("Error occurred during search:", error);
            alert("Đã xảy ra lỗi khi tìm bàn.");
        }
    }

</script>
<!-- CSS -->
<style>
    /* Add space between sections */
    .mb-4 {
        margin-bottom: 1.5rem !important;
    }
    /* Flexbox for card content to be responsive */
    .col-md-4 {
        flex: 0 1 32%; /* Three cards per row */
        max-width: 100%;
        margin-bottom: 20px;
    }
    /* Styling customer and booking time info */
    .text-bold {
        font-weight: bold;
        font-size: 1rem;
        margin-top: 10px;
        color: #e74c3c; /* Highlighted in red */
    }
    /* Better spacing for card content */
    .card-body {
        padding: 20px;
    }
    .card-text {
        color: #000;
    }

    .card-title {
        font-size: 1.25em;
        font-weight: bold;
    }

    /* Đổi màu nút khi được chọn */
.active-area {
    background-color: #007bff !important;
    color: white !important;
}
    /* Button styling for booking and other actions */
    .btn {
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .btn-sm {
        padding: 8px 15px;
        font-size: 0.875rem;
    }

    /* Primary button styling */
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    /* Secondary button styling */
    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
    }

        .btn-warning:hover {
            background-color: #e0a800;
            border-color: #e0a800;
        }

    /* Danger button styling */
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    /* Success button styling */
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

        .btn-success:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

    /* Custom coloring for different table areas */
    .bg-vip {
        background-color: #ffeaa7;
        border-left: 5px solid #e1b12c;
    }

    .bg-inside {
        background-color: #dfe6e9;
        border-left: 5px solid #74b9ff;
    }

    .bg-outside {
        background-color: #dff9fb;
        border-left: 5px solid #00cec9;
    }
/* Đổi màu cho các bàn đã đặt */
.bg-booked {
    background-color: #f8d7da;
}
    /* Đổi màu nền cho các khu vực khác nhau */
    .bg-vip {
        background-color: #ffd700; /* Vàng cho VIP */
    }

    .bg-inside {
        background-color: #87ceeb; /* Xanh dương cho Bên Trong */
    }

    .bg-outside {
        background-color: #98fb98; /* Xanh lá cho Bên Ngoài */
    }

    /* Canh chỉnh trạng thái và nút tìm */
    .form-inline .form-control {
        margin-right: 10px;
    }
    /* Additional styling for action button alignment */
    .d-flex {
        justify-content: space-between;
        align-items: center;
        gap: 10px;
    }

    .d-flex .btn {
        flex: 1; /* Đảm bảo các nút có chiều rộng bằng nhau */
        margin-left: 5px; /* Thêm khoảng cách giữa các nút */
        margin-right: 5px;
    }

    /* Styling cho dropdown và nút tìm */
    select.form-control-sm {
        width: 150px;
        padding: 5px;
        font-size: 14px;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 14px;
    }
    /* Table title styling */
    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }
    /* Styling for table details */
    .card-text {
        font-size: 1rem;
        line-height: 1.5;
        color: #555;
    }

    .card-deck {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

        .card-deck .card {
            flex: 0 1 calc(33% - 10px); /* Three cards per row with gaps */
            margin-bottom: 20px;
            background-color: #f8f9fa; /* Light grey background for modern look */
        }


    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
        /* Better card hover effect */
        .card:hover .btn {
            transform: scale(1.05);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }
    .card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #fff;
        overflow: hidden;
    }
    /* Đổi màu nền cho các khu vực khác nhau */
    .bg-vip {
        background-color: #ffd700; /* Vàng cho VIP */
    }

    .bg-inside {
        background-color: #87ceeb; /* Xanh dương cho Bên Trong */
    }

    .bg-outside {
        background-color: #98fb98; /* Xanh lá cho Bên Ngoài */
    }

    .bg-booked {
        background-color: #f8d7da; /* Màu hồng cho bàn đã đặt */
    }

    /* Styling cho nút khu vực khi được chọn */
    .active-area {
        color: white !important;
    }


    
    /* Canh chỉnh trạng thái và nút tìm */
    .form-inline .form-control {
        margin-right: 10px;
    }

    .d-flex .btn {
        flex: 1; /* Đảm bảo các nút có chiều rộng bằng nhau */
        margin-left: 5px; /* Thêm khoảng cách giữa các nút */
        margin-right: 5px;
    }

    .mr-2 {
        margin-right: 0.5rem;
    }
    /* Status text bold */
    .table-status {
        font-weight: bold;
        color: #333;
    }
</style>