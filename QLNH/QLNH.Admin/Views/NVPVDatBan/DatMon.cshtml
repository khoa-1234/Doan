@model QLNH.Admin.ViewModels.OrderDishViewModel
@{
    Layout = null;
}
<link href="/css/datmon_style.css" rel="stylesheet" />

<section id="order-food-section" class="order-food-section section p-5">
    <div class="container-fluid" data-aos="fade-up" data-aos-delay="100">
        <h2 class="text-center mb-4">Chọn Món Ăn</h2>

        <!-- Main Row: Left - Center - Right -->
        <div class="d-flex justify-content-between">

            <!-- Left: Menu Categories -->
            <div class="menu-section" style="width: 25%;">
                <div class="menu-categories">
                    <h4 class="text-center">Danh Mục</h4>
                    <ul id="foodCategoryList" class="menu-category-list"></ul>
                </div>
            </div>

            <!-- Center: Food Items Display -->
            <div class="food-section" style="width: 50%;">
                <div class="menu-items-display">
                    <h4 class="text-center">Món Ăn</h4>
                    <ul id="foodItemsList" class="food-items-list"></ul>
                </div>
            </div>

            <div class="cart-section" style="width: 25%;">
                <div class="cart-container">
                    <h4 style="color:aquamarine">Giỏ Hàng</h4>
                    <ul id="foodCartList">
                        <!-- Each item will be dynamically inserted here -->
                    </ul>
                    <p><strong>Tổng Cộng: </strong><span id="foodTotalPrice">0</span> VND</p>

                    <!-- Order Button -->
                    <div class="text-center mt-4">
                        <button id="btn-submit-order" class="btn btn-gradient btn-lg px-5">Đặt Món</button>
                    </div>

                    <!-- View Order History Button -->
                    <div class="text-center mt-4">
                        <button id="btn-view-history" class="btn btn-gradient btn-lg px-5">Lịch Sử Đơn Hàng</button>
                    </div>

                    <!-- Order History Display -->
                    <div id="order-history" class="mt-4" style="display: none;">
                        <h4>Lịch Sử Đơn Hàng</h4>
                        <ul id="orderHistoryList">
                            <!-- Order history will be displayed here -->
                        </ul>
                    </div>
                </div>
            </div>


        </div>
    </div>
</section>

<!-- JavaScript Logic for Handling Menu and Cart -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Global cart variable and donHangId variable to store the order ID
        let cart = [];
        let donHangId = null; // Store the order ID after a successful order

        // Extract parameters from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const tableId = urlParams.get('tableId');
        const datBanId = urlParams.get('datBanId');
        const khachHangId = urlParams.get('khachHangId');

        const foodCategoryList = document.getElementById('foodCategoryList'); // Category list
        const foodItemsList = document.getElementById('foodItemsList'); // Dishes list
        const foodCartList = document.getElementById('foodCartList'); // Cart list
        const foodTotalPrice = document.getElementById('foodTotalPrice'); // Total price
        const orderHistoryList = document.getElementById('orderHistoryList'); // Order History List

        // Fetch the menu data and display the categories and items
        function loadMenu() {
            fetch('/NVPVDatBan/GetMenuWithSubGroups')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data.length > 0) {
                        renderCategories(data.data); // Render main categories
                    } else {
                        foodCategoryList.innerHTML = '<p>No menu data available.</p>';
                    }
                })
                .catch(error => {
                    console.error('Failed to load menu:', error);
                    foodCategoryList.innerHTML = '<p>Failed to load menu data.</p>';
                });
        }

        // Render main categories and subcategories
        function renderCategories(menuData) {
            foodCategoryList.innerHTML = ''; // Clear previous categories

            menuData.forEach(category => {
                const categoryItem = document.createElement('li');
                categoryItem.textContent = category.tenNhom;
                categoryItem.classList.add('menu-category-item');

                if (category.children && category.children.length > 0) {
                    const arrow = document.createElement('span');
                    arrow.textContent = " ➤ ";
                    categoryItem.appendChild(arrow);

                    categoryItem.addEventListener('click', function (event) {
                        if (event.target === categoryItem || event.target === arrow) {
                            categoryItem.classList.toggle('expanded');
                            toggleSubCategories(category.children, categoryItem); // Toggle rendering of subcategories
                        }
                    });
                } else {
                    categoryItem.addEventListener('click', function () {
                        displayDishes(category.dishes);
                    });
                }

                foodCategoryList.appendChild(categoryItem);
            });
        }

        // Render subcategories recursively
        function toggleSubCategories(subCategories, parentItem) {
            let subCategoryList = parentItem.querySelector('ul');

            if (!subCategoryList) {
                subCategoryList = document.createElement('ul');
                subCategoryList.classList.add('sub-category-list');
                parentItem.appendChild(subCategoryList);
            }

            if (parentItem.classList.contains('expanded')) {
                subCategoryList.innerHTML = ''; // Clear previous subcategories
                renderSubCategories(subCategories, parentItem);
            } else {
                subCategoryList.innerHTML = ''; // Clear the list when collapsed
            }
        }

        // Render subcategories recursively
        function renderSubCategories(subCategories, parentItem) {
            const subCategoryList = parentItem.querySelector('ul');

            subCategories.forEach(subCategory => {
                const subCategoryItem = document.createElement('li');
                subCategoryItem.textContent = subCategory.tenNhom;
                subCategoryItem.classList.add('menu-subcategory-item');

                subCategoryItem.addEventListener('click', function (event) {
                    event.stopPropagation(); // Prevent the parent category from toggling
                    subCategoryItem.classList.toggle('expanded');
                    toggleSubCategories(subCategory.children, subCategoryItem);
                });

                subCategoryItem.addEventListener('click', function () {
                    displayDishes(subCategory.dishes);
                });

                subCategoryList.appendChild(subCategoryItem);
            });
        }

        // Display dishes for a selected category
        function displayDishes(dishes) {
            foodItemsList.innerHTML = ''; // Clear previous items

            if (!dishes || dishes.length === 0) {
                foodItemsList.innerHTML = '<p>No dishes available in this category.</p>';
                return;
            }

            dishes.forEach(dish => {
                const foodItem = document.createElement('li');
                foodItem.innerHTML = `
                    <img src="${dish.hinhAnh || 'default-image.jpg'}" alt="${dish.tenMonAn}" />
                    <div>
                        <h4>${dish.tenMonAn}</h4>
                        <p>${dish.moTa}</p>
                        <p>Price: ${dish.gia.toLocaleString()} VND</p>
                        <button class="btn-add-to-cart" data-id="${dish.monAnId}" data-name="${dish.tenMonAn}" data-price="${dish.gia}" data-image="${dish.hinhAnh || 'default-image.jpg'}">Add to Cart</button>
                    </div>
                `;
                foodItemsList.appendChild(foodItem);

                foodItem.querySelector('.btn-add-to-cart').addEventListener('click', function (e) {
                    const dishId = e.target.getAttribute('data-id'); // Lấy MonAnId từ data-id
                    const dishName = e.target.getAttribute('data-name');
                    const dishPrice = parseInt(e.target.getAttribute('data-price'));
                    const dishImage = e.target.getAttribute('data-image');
                    addToCart(dishId, dishName, dishPrice, dishImage);
                });
            });
        }

        // Add selected item to the cart with quantity adjustment
        function addToCart(id, name, price, image) {
            const existingCartItem = cart.find(item => item.id === id);

            if (existingCartItem) {
                existingCartItem.quantity++; // Increase the quantity if the item already exists
            } else {
                const cartItem = {
                    id: id,  // Sử dụng MonAnId
                    name: name,
                    price: price,
                    quantity: 1,
                    image: image || 'default-image.jpg'
                };
                cart.push(cartItem);
            }

            renderCartItems(); // Update the cart UI
        }

        // Remove item from the cart
        function removeFromCart(id) {
            cart = cart.filter(item => item.id !== id); // Remove item from the cart array
            renderCartItems(); // Update the cart UI
        }

        // Increase quantity of a cart item
        function increaseQuantity(id) {
            const cartItem = cart.find(item => item.id === id);
            if (cartItem) {
                cartItem.quantity++;
                renderCartItems(); // Update the cart UI
            }
        }

        // Decrease quantity of a cart item
        function decreaseQuantity(id) {
            const cartItem = cart.find(item => item.id === id);
            if (cartItem && cartItem.quantity > 1) {
                cartItem.quantity--; // Decrease quantity if greater than 1
            } else {
                removeFromCart(id); // Remove item if quantity is 1
            }
            renderCartItems(); // Update the cart UI
        }

        // Render cart items with image and quantity controls
        function renderCartItems() {
            foodCartList.innerHTML = ''; // Clear previous cart items

            if (cart.length === 0) {
                foodCartList.innerHTML = '<p>Giỏ hàng trống</p>';
                updateTotalPrice();
                return;
            }

            cart.forEach(item => {
                const cartItem = document.createElement('li');
                cartItem.innerHTML = `
                    <div class="cart-item">
                        <img src="${item.image}" alt="${item.name}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 8px;">
                        <div class="cart-item-content">
                            <h4>${item.name}</h4>
                            <p>${(item.price * item.quantity).toLocaleString()} VND</p>
                            <div class="cart-item-controls">
                                <button class="btn-quantity" onclick="decreaseQuantity('${item.id}')">-</button>
                                <span>${item.quantity}</span>
                                <button class="btn-quantity" onclick="increaseQuantity('${item.id}')">+</button>
                                <button class="btn-remove" onclick="removeFromCart('${item.id}')">x</button>
                            </div>
                        </div>
                    </div>
                `;
                foodCartList.appendChild(cartItem);
            });

            updateTotalPrice(); // Update the total price after rendering items
        }

        function updateTotalPrice() {
            const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            foodTotalPrice.textContent = total.toLocaleString() + ' VND';
        }

        // Submit the order
        document.getElementById('btn-submit-order').addEventListener('click', function () {
            if (cart.length === 0) {
                alert("Giỏ hàng trống. Vui lòng thêm món ăn.");
                return;
            }

            // Prepare the order data to send to the server
            const orderDetails = cart.map(item => ({
                MonAnId: item.id,  // Truyền đúng MonAnId
                SoLuong: item.quantity,
                Gia: item.price
            }));

            // Use the parameters extracted from the URL
            const orderData = {
                TableId: tableId,
                DatBanId: datBanId,
                KhachHangId: khachHangId,
                ChiTietDonHangs: orderDetails
            };

            // Send the order to the server using an AJAX request
            fetch('/NVPVDatBan/BookOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Ensure it's JSON
                })
                .then(data => {
                    if (data.message === "Đặt món thành công!") {
                        donHangId = data.donHangId;  // Store donHangId after the order is successful
                        console.log("Order ID:", donHangId); // Log the order ID for debugging
                        alert("Đặt món thành công!");
                        cart = [];
                        renderCartItems();  // Update the cart UI
                    } else {
                        alert("Có lỗi xảy ra: " + data.message);
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Đã xảy ra lỗi khi gửi đơn đặt món.");
                });
        });

        // Get order history when "Lịch Sử Đơn Hàng" button is clicked
        // Get order history when "Lịch Sử Đơn Hàng" button is clicked
        document.getElementById('btn-view-history').addEventListener('click', function () {
            if (!donHangId) {
                alert("Không có đơn hàng để xem lịch sử.");
                return;
            }

            // Function to get order history using donHangId
            fetch(`/NVPVDatBan/GetOrderHistory?donHangId=${donHangId}`)
                .then(response => response.json())
                .then(historyData => {
                    console.log("History Data:", historyData); // Xem toàn bộ dữ liệu trả về

                    // Kiểm tra nếu tồn tại dữ liệu
                    if (historyData && historyData.monAnDaDat) {
                        // Hiển thị lịch sử đơn hàng
                        displayOrderHistory(historyData);

                        // Hiển thị phần tử lịch sử đơn hàng bằng cách thay đổi CSS
                        document.getElementById('order-history').style.display = 'block';
                    } else {
                        alert(`Không thể lấy lịch sử đơn hàng. Lý do: Dữ liệu không hợp lệ hoặc đơn hàng trống.`);
                    }
                })
                .catch(error => {
                    console.error('Error fetching order history:', error);
                    alert("Đã xảy ra lỗi khi lấy lịch sử đơn hàng.");
                });
        });

        function displayOrderHistory(orderData) {
            orderHistoryList.innerHTML = ''; // Clear the list before adding new items

            // Hiển thị các món ăn trong đơn hàng
            orderData.monAnDaDat.forEach(monAn => {
                const dishItem = document.createElement('li');
                dishItem.innerHTML = `
                <div style="display: flex; align-items: center;">
                        <img src="https://localhost:7244/api/MonAn/images/MonAn/${monAn.hinhAnh || 'default-image.jpg'}" alt="${monAn.tenMonAn}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;">
                    <div>
                        <h4>${monAn.tenMonAn}</h4>
                        <p>Số lượng: ${monAn.soLuong}</p>
                    </div>
                </div>
            `;
                orderHistoryList.appendChild(dishItem);
            });
        }


        // Load the menu when the page is ready
        loadMenu();
    });


</script>




